# orders/tasks.py
import os

from celery import shared_task
from django.db.models import Sum, Count
from django.utils import timezone
from datetime import timedelta
from django.conf import settings
import requests
import json


@shared_task
def send_daily_sales_report():
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º —á–µ—Ä–µ–∑ –±–æ—Ç–∞
    """
    from .models import Order, OrderItem

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –¥–ª—è –æ—Ç—á–µ—Ç–∞ (–≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å)
    today = timezone.now().date()
    yesterday = today - timedelta(days=1)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
    orders_yesterday = Order.objects.filter(
        created_at__date=yesterday,
        status__in=['paid', 'confirmed', 'completed']
    )

    total_orders = orders_yesterday.count()
    total_revenue = orders_yesterday.aggregate(Sum('total_price'))['total_price__sum'] or 0

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ø–æ—Å–æ–±–∞–º –¥–æ—Å—Ç–∞–≤–∫–∏
    delivery_stats = orders_yesterday.values('delivery_method').annotate(
        count=Count('id'),
        revenue=Sum('total_price')
    )

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã
    payment_stats = orders_yesterday.values('payment_method').annotate(
        count=Count('id'),
        revenue=Sum('total_price')
    )

    # –¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤
    top_products = OrderItem.objects.filter(
        order__created_at__date=yesterday,
        order__status__in=['paid', 'confirmed', 'completed']
    ).values(
        'product__name'
    ).annotate(
        quantity=Sum('quantity'),
        revenue=Sum('price')
    ).order_by('-quantity')[:10]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    report_lines = [
        f"üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º</b>",
        f"üìÖ <i>–ó–∞ {yesterday.strftime('%d.%m.%Y')}</i>",
        "",
        f"üì¶ <b>–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤:</b> {total_orders}",
        f"üí∞ <b>–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞:</b> {total_revenue:.2f}‚ÇΩ",
        "",
        "<b>üì¶ –ü–æ —Å–ø–æ—Å–æ–±–∞–º –¥–æ—Å—Ç–∞–≤–∫–∏:</b>"
    ]

    for stat in delivery_stats:
        method = dict(Order.DELIVERY_METHOD_CHOICES).get(stat['delivery_method'], stat['delivery_method'])
        report_lines.append(f"  ‚Ä¢ {method}: {stat['count']} –∑–∞–∫. ({stat['revenue'] or 0:.2f}‚ÇΩ)")

    report_lines.extend([
        "",
        "<b>üí≥ –ü–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã:</b>"
    ])

    for stat in payment_stats:
        method = dict(Order.PAYMENT_METHOD_CHOICES).get(stat['payment_method'], stat['payment_method'])
        report_lines.append(f"  ‚Ä¢ {method}: {stat['count']} –∑–∞–∫. ({stat['revenue'] or 0:.2f}‚ÇΩ)")

    if top_products:
        report_lines.extend([
            "",
            "<b>üèÜ –¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤:</b>"
        ])
        for i, product in enumerate(top_products, 1):
            report_lines.append(
                f"  {i}. {product['product__name']}: {product['quantity']} —à—Ç. ({product['revenue'] or 0:.2f}‚ÇΩ)")

    report_text = "\n".join(report_lines)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç —á–µ—Ä–µ–∑ –±–æ—Ç–∞
    try:
        payload = {
            "chat_id": settings.TELEGRAM_ADMIN_CHAT_ID,
            "text": report_text,
            "parse_mode": "HTML"
        }

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ Telegram API
        bot_token = os.getenv("BOT_TOKEN")
        if bot_token:
            response = requests.post(
                f"https://api.telegram.org/bot{bot_token}/sendMessage",
                json=payload,
                timeout=10
            )
            print(f"–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {response.status_code}")
        else:
            print("BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞: {e}")

    return f"–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞ {yesterday}"