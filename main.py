import os
import asyncio
import logging
from typing import Dict, Any
from datetime import datetime, timedelta

import requests
from aiohttp import web
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID"))
DJANGO_BASE_URL = os.getenv("DJANGO_BASE_URL")
BOT_SHARED_SECRET = os.getenv("BOT_SHARED_SECRET")
PORT = int(os.getenv("BOT_SERVICE_PORT", "8081"))

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("bot")

if not BOT_TOKEN or not ADMIN_CHAT_ID or not DJANGO_BASE_URL:
    raise RuntimeError("BOT_TOKEN, ADMIN_CHAT_ID, DJANGO_BASE_URL must be set in .env")


bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

def build_keyboard(order_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{order_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{order_id}")
        ]
    ])

def order_text(data: Dict[str, Any]) -> str:
    lines = [
        f"üì¶ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{data['order_id']}</b>",
        f"üë§ –ò–º—è - {data.get('first_name') or '‚Äî'}",
        f"üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - {data.get('phone') or '‚Äî'}",
        f"üí∞ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã - {data.get('payment_method')}",
    ]
    if data.get('is_paid'):
        lines.append(f"üí∞ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã (–ö–∞—Ä—Ç–æ–π) - {data.get('is_paid') or '-'}")

    if data.get("pickup_address"):
        lines.append("üöö –°–∞–º–æ–≤—ã–≤–æ–∑")
        lines.append(f"üè† –ê–¥—Ä–µ—Å –∑–∞–≤–µ–¥–µ–Ω–∏—è - {data.get('pickup_address') or '‚Äî'}")
    else:
        lines.append(f"üöö {data.get('delivery_method') or '‚Äî'}")
        lines.append(f"üè† –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ - {data.get('address') or '‚Äî'}")



    lines.append(f"üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ - <b>{data.get('total')}‚ÇΩ</b>")

    comment = data.get("comment")
    if comment:
        lines.append(f"üìù {comment}")

    items = data.get("items") or []
    if items:
        lines.append("")
        lines.append("üí∞ –ó–∞–∫–∞–∑:")
        for it in items:
            lines.append(f"‚Ä¢ {it['name']} x{it['qty']} = {it['total']}‚ÇΩ")

    return "\n".join(lines)

async def call_django_update(order_id: int, action: str) -> bool:
    url = f"{DJANGO_BASE_URL.rstrip('/')}/orders/api/bot/{order_id}/{action}/"
    headers = {"X-Api-Key": BOT_SHARED_SECRET, "Content-Type": "application/json"}

    try:
        print(f">>> [Bot] –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Django: {url}")
        print(f">>> [Bot] –°–µ–∫—Ä–µ—Ç: {BOT_SHARED_SECRET}")

        r = requests.post(url, headers=headers, timeout=10)
        print(f">>> [Bot] –û—Ç–≤–µ—Ç Django: {r.status_code} {r.text}")

        return r.status_code == 200
    except Exception as e:
        logger.exception("Call to Django failed: %s", e)
        return False


async def handle_send_order(request: web.Request):
    secret = request.headers.get("X-Api-Key")
    if secret != BOT_SHARED_SECRET:
        return web.Response(status=403, text="Forbidden")

    try:
        data = await request.json()
    except Exception:
        return web.Response(status=400, text="Bad JSON")

    try:
        text = order_text(data)
        kb = build_keyboard(int(data["order_id"]))
        await bot.send_message(chat_id=ADMIN_CHAT_ID, text=text, reply_markup=kb)
    except Exception as e:
        logger.exception("Failed to send message: %s", e)
        return web.Response(status=500, text=str(e))

    return web.Response(text="ok")

@dp.callback_query(F.data.startswith("confirm_"))
async def on_confirm(callback: types.CallbackQuery):
    order_id = int(callback.data.split("_", 1)[1])
    ok = await call_django_update(order_id, "confirm")
    if ok:
        await callback.answer("–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω")
        try:
            await callback.message.edit_text(callback.message.html_text + "\n\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω")
        except Exception:
            await callback.message.answer("‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω")
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)

@dp.callback_query(F.data.startswith("cancel_"))
async def on_cancel(callback: types.CallbackQuery):
    order_id = int(callback.data.split("_", 1)[1])
    ok = await call_django_update(order_id, "cancel")
    if ok:
        await callback.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω")
        try:
            await callback.message.edit_text(callback.message.html_text + "\n\n‚ùå –û—Ç–º–µ–Ω—ë–Ω")
        except Exception:
            await callback.message.answer("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω")
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)

@dp.message()
async def fallback(msg: types.Message):
    await msg.answer("–Ø —Å–ª—É–∂–µ–±–Ω—ã–π –±–æ—Ç. –ó–∞–∫–∞–∑—ã –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Å–∞–π—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")


@dp.message(F.text == "/report")
async def send_manual_report(message: types.Message):
    """–†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º"""
    if message.from_user.id != ADMIN_CHAT_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    from orders.tasks import send_daily_sales_report
    try:
        result = send_daily_sales_report.delay()
        await message.answer("–û—Ç—á–µ—Ç –∑–∞–ø—É—â–µ–Ω...")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

async def start_http_server():
    app = web.Application()
    app.router.add_post("/send_order", handle_send_order)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()
    logger.info(f"HTTP server started at http://0.0.0.0:{PORT}")

async def main():
    await start_http_server()
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("Bot stopped")
